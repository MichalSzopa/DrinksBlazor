@page "/login"

@using DrinksWebApp.Models
@using DrinksWebApp.Services
@using DrinksWebApp.Auth
@using static DrinksWebApp.Shared.Enums;

@inject UserService userService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime js

<h3>Login</h3>

<EditForm Model="@loginModel">
    <DataAnnotationsValidator />
    <div class="mb-3">

        <label for="username" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="loginModel.username" />
        </div>

        <label for="password" class="form-label">Password</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="loginModel.password" />
        </div>


    </div>
</EditForm>

<button class="btn btn-light" @onclick="Submit">Zaloguj się</button>

<button class="btn btn-light" @onclick="Cancel">Anuluj</button>

@if (loginError)
{
    <span> Błąd logowania! </span>
}

@code {
    public LoginModel loginModel = new();

    protected bool loginError = false;

    protected async Task Submit()
    {
        try
        {
            var user = await userService.Login(loginModel.username, loginModel.password);

            if (user == null)
            {
                await js.InvokeVoidAsync("alert", "Invalid user name or password");
                loginError = true;
                return;
            }

            var role = user.Type == UserType.Admin ? "Admin" : user.Type == UserType.Moderator ? "Moderator" : user.Type == UserType.User ? "User" : "InvalidRole";

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = user.Name,
                Role = role
            });

            navManager.NavigateTo("/");
        }
        catch (Exception)
        {
            loginError = true;
        }
    }

    protected async Task Cancel()
    {
        navManager.NavigateTo("/");
    }

    public class LoginModel
    {
        public string username { get; set; }

        public string password { get; set; }
    }
}

